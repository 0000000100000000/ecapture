// Code generated by go-bindata. DO NOT EDIT.
// sources:
// user/bytecode/ssldump_kern.o

package assets


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataUserBytecodeSsldumpkernO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x7b\x6c\x1c\x57\xd5\xff\xdd\x99\xdd\xf5\xae\x67\xbd\xde\x78\xed\x78\x6d\xa7\xfd\x36\x69\x1e\x4e\x9a\xac\xdd\x38\x69\xf3\x35\xd0\x3c\x9a\x97\xc1\x94\x34\x4e\xd4\x24\xb4\x9a\xac\xbd\x63\x7b\x95\xf5\x78\x33\x3b\x76\x1d\xa5\x90\x08\x09\x29\x12\x41\x04\xa9\x11\x20\xa0\x4d\x90\xa0\x2a\x52\xc5\xeb\x8f\x04\x15\x89\x48\x14\x54\x41\x2a\xb5\x88\x4a\xa5\xbc\x02\x15\x22\xa2\x15\x6d\x78\x05\x29\x12\x8b\xce\x9d\x3b\x3b\x77\xaf\x77\xdc\x08\xc1\x48\xbb\x73\x7e\xe7\x9e\x7b\xce\xb9\xe7\x9e\x39\xe7\xce\x9c\xde\x3d\xb2\x47\x63\x0c\xfe\xc5\x70\x0b\x01\x0a\xae\xed\xdd\x12\x2d\xfe\xb3\x60\xc8\x32\xc0\x72\xad\x71\xe2\xb8\x56\xb1\xf5\x54\xef\x7b\x35\xa2\x89\x3f\x69\xb9\x39\xa2\xf7\xec\xca\x15\x4f\xf5\xde\xa8\xf3\x6d\xeb\x49\xce\x1f\x1d\x1d\xc9\x9d\xea\xbd\xce\xf9\x97\x85\xd1\x6a\xef\x3f\x39\xfe\xc1\x25\x0f\xb7\x30\xe0\x7a\xad\x56\xbb\xac\x01\x3d\x00\x3e\x05\x20\x46\xf2\xc2\x97\x0b\x92\x8f\xa4\x97\x74\x92\x5d\xb2\x49\x7e\x91\x4f\xd8\xbb\x7f\x84\xc6\xff\x55\xab\xd5\x9a\x2c\xed\x7f\x72\xb1\x25\x6c\x55\x2a\x13\xd5\x53\xe9\xee\xbe\xd4\x12\xd6\x11\x03\xb4\x4d\xd0\x53\xc3\x99\x6d\x3d\x0f\x1a\x5b\x0d\x2d\x0b\xe8\xab\x31\x9c\x01\x22\x9b\xf9\x2d\xba\x12\x7a\xea\x21\xc3\x30\x80\x18\x63\xc4\x69\x59\x8e\xe1\xcc\x03\x06\x10\xa7\x21\xc3\x78\xc8\x00\x12\x4b\x31\x9c\xd1\x53\xa4\x02\x68\xcd\x30\xc3\xf0\x48\xa3\x8d\x2b\x27\xb0\xc5\x00\x92\xed\x5c\x67\x1b\xd7\x10\x05\x52\x19\xa6\xa7\x8c\xa8\x27\xdb\x2e\xc9\x46\x81\x74\x84\x91\x4a\x5f\xd3\x92\x7e\xe8\xa9\x65\xed\x40\x47\xdd\x54\x14\xc8\x6c\xaa\xcf\x01\x3a\xbb\xd8\x70\x66\x4d\x0f\xd0\x15\xe5\x66\x96\x66\x01\x74\xe7\x19\xad\x73\x7b\xf6\xf3\x3b\x7b\x3c\x07\xd7\xf4\xd0\x6a\x81\x6c\x14\x1e\x83\x64\x7b\x0c\x76\xa8\x1b\xe8\xdd\x04\x2d\x1b\x70\xfb\xda\x29\x68\x8f\xea\x40\x84\x87\x2f\xce\xd3\x21\x59\x4f\xc5\x2e\x29\xb4\x67\x01\x68\x94\x8e\xdb\x28\xce\x1d\x09\xdd\x1f\xd0\x77\x01\x88\x0c\x03\x88\x2e\xa7\xbf\x88\xb6\x0a\x80\x45\x52\xd7\x02\xa9\xd8\x09\x4a\xab\x79\x12\x45\x34\x4f\x0c\x16\x1f\x22\x93\x2d\xda\x5e\x00\x4f\x93\xf8\x2b\x81\x78\xe2\x59\x00\x4f\x90\xc9\x74\x74\x3f\xcd\x8c\x68\x94\xec\x2f\x92\x58\x36\x10\x6b\x8d\xb3\x2e\xc3\x06\x70\x8d\x06\xba\x81\xe4\x6b\xa4\x7a\x38\xb0\xa5\x55\x01\xfc\x85\x46\xd7\x48\xd3\x72\x6c\x39\x9f\xb6\x86\x01\xec\x1e\x18\xe7\x00\x6c\x21\x7a\x65\xdc\xf8\x36\x80\xa3\x44\xaf\x4a\x1b\x94\xef\x25\xa2\x57\x67\x91\x5c\xcf\x64\xd5\x0c\xc9\x0f\x32\x20\xb1\x8f\x01\x2f\x90\xa3\x2b\x12\xa3\x0c\x78\x8e\xc8\xce\xe8\x79\x12\x8b\x27\x4d\x06\x24\x8b\x0c\xd0\x69\xf9\x49\xdb\xd7\xd0\x46\x1a\xd0\x0f\xed\x87\x00\xce\x93\x81\xc1\x06\xef\xd6\x05\xde\xad\x97\xbc\xdb\x20\x79\x97\x97\xbc\x1b\xc8\x42\xfb\x35\x80\x37\x09\x6c\x6d\xd0\xb4\x99\x6b\x6a\xd7\x00\xf6\x80\xa7\x29\x47\xf4\x16\x4f\xd3\x20\xd1\xff\xef\x69\xe2\xd6\x1e\xcc\x22\xd9\xa9\xc9\xeb\x8c\x21\xb9\x4a\x03\x12\xb4\x43\x7f\xa6\xc5\xdd\x9d\xdc\xac\x01\xa9\x63\x0c\xc8\xa5\x59\x82\xeb\x3f\x4b\x7a\x5a\x61\xf4\x30\xe0\x12\xd1\x46\xdc\x18\xa0\xc0\x10\x9d\x4c\x1b\x1f\xf0\xe9\xb6\x4e\x63\x3b\x03\xae\x10\x9d\xca\xb6\xef\x66\xc0\x8f\x88\x6e\xcf\xa6\x91\xa6\x3d\x8f\x32\x20\xc2\x62\x4b\x68\xcb\xb0\xe4\x36\x0f\x74\x07\x05\x7a\x35\x03\xb4\xc2\x70\x82\x9c\x19\x22\xfa\x63\x3c\xa5\xbc\x48\xa6\x91\x78\x55\x03\x0e\x13\xff\x48\xe2\x97\x1a\x70\x90\xc8\x65\x09\x5a\xc6\x23\x44\xa6\x32\x27\x18\x70\x53\x03\xf4\x6f\x24\xff\xa1\x01\x9d\x2d\x3a\xd0\x45\x1b\xd4\x45\x4b\x5b\x8a\xe8\x27\x19\x10\x8d\x77\xcb\x09\xcf\x8e\x7e\x9a\xa2\x32\x43\x6a\xb2\x5f\xe3\xe4\xa8\xee\x95\x44\xf4\x6a\x9f\xc3\x57\x88\x75\x62\xaf\xde\x98\xe1\x3d\xe8\x43\x5a\x68\x39\x26\xee\x53\xe2\x3e\x1f\x56\xba\x8e\x5b\x8e\x3d\x50\xad\x96\x8b\xb3\xd3\x15\x93\x40\x7e\x1c\x79\x1c\x3c\xb0\xe3\xe1\xdd\xe6\xfe\xe1\x5d\x28\xd9\x2e\xcc\x72\x69\xdc\xb2\xab\x16\xc6\xa7\x0a\x0e\x4c\x73\xc7\x81\x03\x3b\x8e\x98\xa3\xc3\x47\x77\x9b\x07\x8f\xec\xdf\x6d\x9a\x30\xe7\x2c\xa7\x5a\x9a\xb1\x31\x6b\x57\x4b\x93\xb6\x55\xcc\xf1\x79\xe6\xec\xd0\x46\xb8\xe5\xaa\x69\xcd\x59\xb6\x5b\x85\x7b\xb2\x62\xa1\x30\xee\x96\xe6\x2c\xb3\x5a\x2d\x9b\x8e\x55\x28\x9a\x05\x67\xb2\x6a\x4e\x17\x2a\x38\x6e\x9d\x44\x79\xc6\x9e\xcc\xf1\x3f\x55\xd3\xfd\x9b\x40\xbf\xb9\x42\x79\xd6\xc2\x74\x61\xde\xb4\x6c\xd7\x29\x59\x55\x59\xdf\x93\x4e\xc9\xb5\x02\x85\xc5\x82\x5b\x30\xc7\x66\x27\x26\x2c\xc7\x9c\xb2\x0a\x15\x90\x3b\xc7\x47\x47\x47\x0e\x58\x85\x22\x27\x1e\xa3\x09\xa0\xa9\x5c\x96\xbb\x69\x72\x2f\xdd\xd2\xb4\x55\x75\x0b\xd3\x15\xd3\xae\x62\xb6\x64\xbb\xf7\x6f\x32\x5d\x54\x4a\x45\x0e\x86\x36\x9a\x2e\xdc\x52\x91\x9b\xf0\xec\x94\x2d\x1b\xa6\x59\x1d\xda\x08\xfa\xf9\x32\xaa\x6a\x8c\x55\x26\x4c\xd7\x29\x8c\x5b\x66\xc5\x29\xd9\xee\x71\x6f\xc5\xb4\xc6\xd9\x8a\x33\x33\x66\x99\xa3\xa3\x23\xe6\xa4\xe5\x9a\x13\x45\x98\xa6\x69\x4e\x4c\xbb\x18\x77\xe7\xf1\xec\xdb\x0c\x59\xb1\x67\x5b\x22\xde\x2f\xa3\xd5\xb7\x51\xd3\x79\xca\x7a\xdd\x88\xaa\x6a\xae\x0e\xc1\xd3\x44\x83\x57\x6d\xe9\x17\x6d\x94\xf3\x00\x10\x89\xc3\xcb\x31\x7f\xe2\xdd\xde\x2d\x15\x95\x78\xa4\x2a\x1e\xd0\x0d\xba\x65\x99\x56\x00\x6b\x3d\x3a\x6e\x00\xd8\x20\xe8\x24\x80\x21\x61\x32\x5e\x3f\x5e\x78\x73\x52\x12\xdd\x1e\xd0\xad\x94\xd4\x1f\x12\x73\xc8\x46\x3c\x30\xa5\x75\x84\xf8\x82\x7e\x8f\x19\x01\x22\x39\xb1\xae\x16\x21\xf8\x51\xaa\xf4\xc2\xf6\x28\x3d\xcc\x00\xce\x00\x38\x42\xcf\x3e\x80\xab\xa2\x91\xd0\xda\x33\xd2\xba\xfe\x53\x5d\x9f\x10\xba\xba\x94\x18\x65\x43\x7c\x8f\x49\x32\xbd\x00\xbe\x20\x62\xd7\x07\xe0\xcb\x82\x5e\x06\xe0\xab\x22\x26\xf2\x3e\xf2\x52\x09\xe0\x9b\x9e\x9e\x48\x2e\xed\xf9\xfb\x7f\x62\xf0\xaa\x90\x25\x7f\x5f\x01\xb0\x5c\xf8\xfb\x9a\xa0\x2f\x02\x78\x1d\xc0\x0a\x21\xfb\x26\x80\x7b\x88\x3e\x03\xbc\xe5\xf9\x18\x23\x7b\xb7\x7c\x6b\xcc\x5b\x53\xab\xb7\xb0\x38\xed\x7b\x46\xd0\xbd\xca\xfa\xd2\xfe\xde\xa4\x81\x65\x42\x66\x25\x80\x95\x82\xa6\x06\xde\x2f\x68\xad\x49\xcc\xbb\xa5\x98\xf7\x48\x31\xbf\x4b\x8a\x79\x8b\xf0\x3b\xef\xe9\x49\xad\x56\x62\x2e\xb9\xdd\x46\x60\x1b\xf3\x52\xe5\x61\x6f\x1d\xc9\xb5\x81\x6c\xeb\xfa\x80\x4e\x90\xec\x2f\x84\xce\x7b\x1b\x75\x36\xac\x8d\x7e\x6f\x09\xb9\xbc\x90\x7b\x47\xe0\x3e\x81\xff\xce\xb8\x1c\x4f\x71\x7f\xaf\xe9\x59\xe8\x14\x74\x8e\x37\x86\x80\x5e\x23\xd1\xb7\x3d\x3f\xf9\xdc\x0d\x41\x8c\xa0\x6b\x01\x7f\x40\xe2\x1b\x12\x7f\x50\xe2\x7b\x85\xbd\x49\x29\xf7\xaa\x5f\x50\xb3\xa9\xe8\x7a\xe5\x37\xa4\x36\xf3\xa6\x40\xb5\x7b\xd1\xd2\xdc\x58\xea\xc3\x6b\x36\x95\x68\xaf\x6f\x34\x18\x59\x50\x47\x1b\xea\x33\x95\xe5\x85\xd5\xb8\x59\x59\x6f\x52\xfd\xeb\xc5\xbd\x5e\xd8\xeb\xc5\x9b\xfb\x42\xff\x0b\x3a\x09\x95\xe4\x85\x05\xdb\xe3\x0c\x48\x9c\xfc\x40\xb3\x06\x5b\xb2\xdd\xdc\x82\xd9\xfd\x73\x33\xa5\x62\x6e\xdd\xb8\x3b\xbf\x16\xb9\x5c\x2e\x47\x9d\xc2\xeb\x11\xfd\x2b\x42\x5e\x76\x1e\xb7\x57\xac\xdd\xca\x85\x1d\xcb\x9d\x75\xec\xdc\xe0\x56\xa9\x75\xd7\xdb\x76\xbd\x3b\xe7\xa7\x0b\x95\x2a\xf2\xce\x0c\x0f\x94\x3f\xec\x8f\x52\x8b\xf1\xcb\x48\xa7\xf8\x3d\x0e\xa0\x22\xa5\xe8\x21\x16\xa4\xfe\x3a\x91\xf6\xc4\x13\x2d\x05\x93\x0c\xf8\x38\x09\x7c\x9f\xf1\x31\xc2\xcf\xd0\xf8\x4b\x8c\x9f\x49\x26\xa5\xe7\x66\x4a\x19\x9f\x17\xf8\xa7\x84\x5f\x66\xfc\x95\x00\xa8\xd5\x6a\xb5\x08\xe2\x88\x3f\x65\xd4\x1f\x10\xff\x3a\x2b\xee\xe7\x78\x52\x9b\xfc\x55\x82\xdd\x4e\xb5\x81\x31\xde\x28\xc8\x59\x0a\xb9\xd8\x06\x7f\x37\xc6\x2a\x13\x80\xb2\x25\x0c\x98\x9b\x2e\x97\xec\xd9\xf9\xfc\x14\x55\x09\x8a\xfe\x94\x55\xae\x58\x8e\x59\xb4\x26\xaa\xf9\x29\xef\x31\x4f\xd4\x0b\x88\xfe\x2e\x58\x34\xda\x3a\x10\x45\x4c\xff\xec\xe9\x67\xa2\x51\xfd\x26\x72\xb1\x01\x4d\x03\x6b\xf6\x4a\xcd\x2f\x7e\xca\xc4\xcd\xa6\xef\xa5\x3a\xf4\xa6\x73\x74\xde\x5e\x9a\xf1\x93\x21\xfc\xb6\x10\x7e\x47\x08\x5f\x8d\x2a\xb0\x99\x51\xf3\x8a\xd4\xb1\x4f\x5d\xe6\x4d\x2d\xb6\x80\x7f\x91\xf3\x5b\x16\xf0\x27\x38\x3f\x0e\xff\xc0\xe0\x67\xd7\x88\xe0\xf7\x2b\xfc\xd3\x82\xbf\x4f\xe1\xaf\x10\x7c\xff\xf2\xa9\xdf\x01\xe8\x90\xe2\xe6\xe7\x83\xef\x61\xab\xa8\xce\x49\x09\x47\xf9\x9c\x46\xbc\x54\xc2\xb4\x8a\x5e\x65\x5c\x1c\x84\x78\xe6\x53\x02\xdc\xab\x8c\x3f\x20\x8d\xc7\x83\xc3\x4a\x7d\xfc\x51\x05\x3f\x21\xc9\xd3\xee\x3a\xca\xf8\x49\x05\x9f\x51\xf0\x39\x69\x3e\xf1\xbe\xa8\x8c\x5f\x54\xf0\x73\x0a\xfe\xae\x34\x3f\x25\x1a\xa6\x3c\xfe\x1b\x05\xff\x49\x92\x37\xa4\xe6\xef\x8f\xeb\xac\x11\xb7\x2b\xb8\x4f\xc1\x3b\x15\xfc\x11\x05\x1f\x54\xf0\x53\x0a\x3e\xcb\x02\x7f\x68\x6f\x2f\x28\xe3\x97\x14\xfc\x82\x82\xbf\xa7\xe0\x1f\x2b\xf8\x67\x92\x7e\x7a\x9a\x7e\xab\x8c\xbf\xad\xe0\x5b\x0a\xd6\xb5\x46\xbc\x4e\xc1\xf7\x2b\x78\x9b\x82\x3f\xac\xe0\xc7\x14\x3c\xae\xe0\x19\x05\x9f\x52\xf0\x67\x14\x7c\x41\xc1\x5f\x52\xf0\xd7\x15\xfc\x1d\x05\xff\x44\xc1\xaf\x2b\xf8\xba\x82\xff\xa8\xe0\xb8\xae\xe4\x8b\x1e\xc4\x9b\x44\xef\x52\xc6\xfb\x15\x3c\x24\x61\xaa\x35\x5b\x95\xf1\x5f\x49\xa5\x94\xf2\xfb\x86\x84\x29\x7f\xff\x26\x61\x5e\x1b\x82\x52\xc7\xf7\x3b\x1b\x09\xf4\xd1\xf3\x3c\x28\x8d\xd3\xf3\xba\x4f\xc2\x24\x23\x1d\x14\xb9\xff\xdb\x15\xbc\x5f\xc1\xc7\x14\x5c\x51\xf0\x19\x05\x77\x4a\xb6\xa8\xb6\xf9\x2f\x0e\x7e\xbc\xca\x0a\x6e\x4f\xb4\xa6\x8c\x64\x1b\xf2\x45\x6b\x6c\x76\xd2\x2c\x8c\x8d\x39\xd6\x1c\xf2\xae\x35\xef\x22\xef\x58\xe5\xfc\xce\x83\x7b\xf2\x04\xa4\x73\x9e\x38\x1b\x78\x33\x9c\x82\x3d\x69\xd5\x51\xd5\x75\x16\x39\xb1\x85\x1e\xf2\x16\x1c\x9a\xb8\x69\x4f\x65\xc9\x9e\x98\x91\xce\x25\xe5\xf2\xdc\xb4\x59\x28\x16\x9d\x6a\x69\x32\x38\xb7\x48\xf2\xe5\x92\xdd\x80\x27\x9c\xc2\xb4\x75\x47\x27\x30\xf5\xdb\x46\xd5\x75\xdc\xc2\x18\xf2\xd5\x93\xd3\xfc\x2e\x0e\x43\x7e\x58\xa4\xf3\x93\x18\xa2\x19\xf7\xe5\xef\xc3\x7f\xe1\xea\x64\x68\xda\xe5\xdf\x15\x5f\x3c\x1f\x51\x4e\x0e\xea\x41\xa2\x5d\xf0\x62\x0a\x7f\x7b\x88\xbd\x88\x82\xff\xfa\x3e\xf3\xcf\x2a\xfc\xb8\x82\x57\xb2\x20\xc7\xe4\xeb\xe5\x10\x7b\x2a\xde\x26\xe6\x6f\x54\xf8\xd7\xc4\xbd\x47\xe1\x33\xe5\x7e\x45\xd0\x6a\x0c\xff\x10\x62\x4f\x8d\xdf\xa5\x90\xf9\xef\xdc\xa1\xff\x1b\x42\xe6\xbf\x27\xee\x53\x0a\x5f\x8d\x1f\x6b\xe2\x13\x5d\x87\x05\x73\xf3\xfb\xec\xff\xd3\x21\xf3\xfd\xfa\x7e\x48\x5f\x7c\xfe\x79\x51\xbf\xd4\xeb\x86\xff\xd9\x50\x2c\xb8\x5b\xaa\x7d\x10\xa7\x7c\x88\x0f\x37\xcd\xec\xff\x5e\x1c\xff\x07\xb1\xb8\xfd\x1d\x82\xa7\xca\x75\x88\x84\x7c\x3e\x64\xfd\xfe\x7d\x90\x35\xb7\xff\xa2\x38\x7a\x8e\xc7\x16\xb7\xbf\x9e\x85\xac\x5f\x14\x58\xbf\x0e\x77\x8b\xbe\xa1\xae\xbf\x27\x64\xfd\x77\x8b\x2f\x57\xe7\xb1\xb8\xfd\xae\x90\xf8\x1f\x16\xcf\xff\x31\xc9\x7e\xba\x89\xfd\x9f\x87\xd8\xff\x96\xb0\xdf\xaf\xf0\xd5\xfc\x7b\x35\xc4\xfe\x15\x61\x3f\x27\xd9\xef\x68\x62\xff\xa5\x10\xfb\x6f\xdc\xe1\xfa\xaf\x86\xd8\x7f\xa3\xab\xd1\x4e\xb7\xe8\x79\xaa\xfd\xe7\xe9\xd9\x1b\xa9\xcd\x28\x2d\x12\x37\xc4\xfc\x16\x69\x7e\x33\xfb\xcb\xd8\xc2\xda\x45\xd7\x94\xf8\xda\x78\x46\x3a\xf7\xc5\x25\xfb\x7e\xbf\xfd\x77\x00\x00\x00\xff\xff\xa5\x59\x65\x6c\x40\x1d\x00\x00")

func bindataUserBytecodeSsldumpkernOBytes() ([]byte, error) {
	return bindataRead(
		_bindataUserBytecodeSsldumpkernO,
		"user/bytecode/ssldump_kern.o",
	)
}



func bindataUserBytecodeSsldumpkernO() (*asset, error) {
	bytes, err := bindataUserBytecodeSsldumpkernOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "user/bytecode/ssldump_kern.o",
		size: 7488,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1647167804, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"user/bytecode/ssldump_kern.o": bindataUserBytecodeSsldumpkernO,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"user": {Func: nil, Children: map[string]*bintree{
		"bytecode": {Func: nil, Children: map[string]*bintree{
			"ssldump_kern.o": {Func: bindataUserBytecodeSsldumpkernO, Children: map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
